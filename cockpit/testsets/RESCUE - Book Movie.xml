<?xml version="1.0"?>
<testset>
  <positions/>
  <handlerwrapper>RescueHandlerWrapper</handlerwrapper>
  <dataelements>
    <title>""</title>
    <date>""</date>
    <selected_title>""</selected_title>
    <starting_time>""</starting_time>
    <selected_cinema/>
    <selected_date/>
    <hall/>
    <zip>1100</zip>
    <city/>
    <reservation_number/>
  </dataelements>
  <endpoints>
    <!-- services>http://sumatra.wst.univie.ac.at:9290/groups/Cinemas/</services -->
    <services>http://localhost:9290/groups/Cinemas/</services>
    <!-- injection_handler>http://sumatra.wst.univie.ac.at:9290/injection/handler</injection_handler -->
    <injection_handler>http://localhost:9291/</injection_handler>
    <!-- select>http://sumatra.wst.univie.ac.at:9290/select/pgwl</select -->
    <select>http://localhost:9293/pgwl</select>
  </endpoints>  
  <description xmlns="http://cpee.org/ns/description/1.0">
    <call id="collect_input" endpoint="select">
      <parameters>
        <method>post</method>
        <info>true</info>
        <templates>
          <uri>'http://gruppe.wst.univie.ac.at/~ralph/input-forms/cinemas.xsl'</uri>
          <name>'Cinemas-Input'</name>
          <lang>'EN'</lang>
        </templates>
      </parameters>
      <manipulate output="result">
        data.title = result[0].value('title')
        data.date = result[0].value('date')
        data.city = result[0].value('city')
      </manipulate>
    </call>
    <call id="a01" endpoint="services">
      <constraints>
          <constraint xpath="address/city" comparator="==" variable="city"/>
      </constraints>
      <parameters><!--{{{--> 
        <info>true</info>
        <service>
          <serviceoperation>"search_and_book"</serviceoperation>
          <injection_handler>endpoints.injection_handler</injection_handler>
        </service>
        <additional_endpoints>
          <selector_service>"select"</selector_service>
        </additional_endpoints>
        <parameters>
          <title>data.title</title>
          <date>data.date</date>
        </parameters>
      </parameters><!--}}}-->
      <manipulate output="result">
       # Dirty Monkey-Hacking, but I coudln't figure out the JSON Problem with this Object
        if result[0].class.to_s == 'Hash'
          result[0] = RescueHash.new_from_obj(result[0])
        end
        properties = RescueHash.new_from_obj(properties)

pp result[0]
        if result[0]['status'] == 200 
          data.reservation_number = result[0].value('reservation_id')
          data.starting_time = result[0].value('starting_time')
          data.selected_title = result[0].value('movie_title')
          data.selected_date = result[0].value('selected_date')
          data.hall = result[0].value('hall')
# == Remove if JSON/YAML works again
          perf_book = properties['call_book']['perform_book']
          data.selected_cinema = " #{perf_book.values[0]['vendor']['name']}\n#{perf_book.values[0]['address']['street']}\n#{perf_book.values[0]['address']['zip']} #{perf_book.values[0]['address']['city']}"
# == Remove if JSON/YAML works again
#          data.selected_cinema = CGI::unescapeHTML("#{properties.value('perform_book')[0].value('name')}\n#{properties.value('perform_book')[0].value('street')}\n#{properties.value('perform_book')[0].value('zip')} #{properties.value('perform_book')[0].value('city')}")
        end
      </manipulate>
    </call>  
  </description>
  <transformation>
    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:d="http://cpee.org/ns/description/1.0">
      <xsl:output method="text"/>
      <xsl:strip-space elements="*"/>
      <xsl:variable name="myspacemultiplier">2</xsl:variable>

      <xsl:template match="/">
        <xsl:apply-templates select="//d:description"/>
      </xsl:template>

      <xsl:template match="//d:description">
        <xsl:apply-templates>
          <xsl:with-param name="myspace"><xsl:value-of select="-1*$myspacemultiplier"/></xsl:with-param>
        </xsl:apply-templates>  
      </xsl:template>

      <xsl:template match="*">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:call-template>
        <xsl:if test="name()='call' or name()='manipulate'">
          <xsl:choose>  
            <xsl:when test="@lay">
              <xsl:text>activity [:</xsl:text>
              <xsl:value-of select="@id"/>
              <xsl:text>,</xsl:text>
              <xsl:value-of select="@lay"/>
              <xsl:text>]</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>activity :</xsl:text>
              <xsl:value-of select="@id"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
        <xsl:if test="name()='call'">
          <xsl:text>, :call, :</xsl:text>
          <xsl:value-of select="@endpoint"/>
          <xsl:apply-templates select="d:parameters"/>
          <xsl:if test="@oid">
            <xsl:text>, :'call-oid' => '</xsl:text><xsl:value-of select="@oid"/><xsl:text>'</xsl:text>
          </xsl:if>
          <xsl:apply-templates select="d:manipulate" mode="part-of-call">
            <xsl:with-param name="myspace"><xsl:value-of select="$myspace"/></xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='manipulate'">
          <xsl:text>, :manipulate</xsl:text>
          <!-- RESCUE: manipulate with dataelement as result object -->
          <xsl:if test="@data">
            <xsl:text>, nil,</xsl:text>
            <xsl:value-of select="@data"/>
          </xsl:if>
          <!-- RESCUE -->
          <xsl:call-template name="print-content">
            <xsl:with-param name="myspace"><xsl:value-of select="$myspace"/></xsl:with-param>
          </xsl:call-template>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='parallel'">
          <xsl:text>parallel</xsl:text>
          <xsl:if test="@wait">
            <xsl:text> :wait => </xsl:text>
            <xsl:value-of select="@wait"/>
          </xsl:if>
          <xsl:text> do</xsl:text>
          <xsl:call-template name="print-newline"/>
          <xsl:apply-templates>
            <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='loop'">
          <xsl:text>loop </xsl:text>
          <xsl:if test="@pre_test">
            <xsl:text>pre_test{</xsl:text>
            <xsl:value-of select="@pre_test"/>
            <xsl:text>} </xsl:text>
          </xsl:if>
          <xsl:if test="@post_test">
            <xsl:text>post_test{</xsl:text>
            <xsl:value-of select="@post_test"/>
            <xsl:text>} </xsl:text>
          </xsl:if>
          <xsl:text>do</xsl:text>
          <xsl:call-template name="print-newline"/>
          <xsl:apply-templates>
            <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='choose'">
          <xsl:text>choose do</xsl:text>
          <xsl:call-template name="print-newline"/>
          <xsl:apply-templates>
            <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='group'">
          <xsl:apply-templates>
            <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='critical'">
          <xsl:text>critical :</xsl:text>
          <xsl:value-of select="@sid"/>
          <xsl:text> do</xsl:text>
          <xsl:call-template name="print-newline"/>
          <xsl:apply-templates>
            <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
      </xsl:template>
      
      <xsl:template match="d:alternative">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:call-template>
        <xsl:text>alternative </xsl:text>
        <xsl:value-of select="@condition"/>
        <xsl:text> do</xsl:text>
        <xsl:call-template name="print-newline"/>
        <xsl:apply-templates>
          <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:apply-templates>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:call-template>
        <xsl:text>end</xsl:text>
        <xsl:call-template name="print-newline"/>
      </xsl:template>

      <xsl:template match="d:otherwise">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:call-template>
        <xsl:text>otherwise do</xsl:text>
        <xsl:call-template name="print-newline"/>
        <xsl:apply-templates>
          <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:apply-templates>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:call-template>
        <xsl:text>end</xsl:text>
        <xsl:call-template name="print-newline"/>
      </xsl:template>

      <xsl:template match="d:parallel_branch">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:call-template>
        <xsl:text>parallel_branch</xsl:text>
        <xsl:if test="@pass">
          <xsl:text> </xsl:text>
          <xsl:value-of select="@pass"/>
        </xsl:if>
        <xsl:text> do</xsl:text>
        <xsl:if test="@local">
          <xsl:text> |</xsl:text>
          <xsl:value-of select="@local"/>
          <xsl:text>|</xsl:text>
        </xsl:if>
        <xsl:call-template name="print-newline"/>
        <xsl:apply-templates>
          <xsl:with-param name="myspace"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:apply-templates>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
        </xsl:call-template>
        <xsl:text>end</xsl:text>
        <xsl:call-template name="print-newline"/>
      </xsl:template>

      <xsl:template match="d:parameters">
        <xsl:apply-templates select="d:*" mode="parameter"/>
      </xsl:template>
        
      <xsl:template match="d:*" mode="parameter">
        <xsl:text>, :</xsl:text>
        <xsl:value-of select="name()"/>
        <xsl:text> => </xsl:text>
        <xsl:choose>  
          <xsl:when test="count(*) > 0">
            <xsl:text>[</xsl:text>
            <xsl:apply-templates select="d:*" mode="sub-parameter"/>
            <xsl:text>]</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="@type = 'symbolic'">
                <xsl:value-of select="text()"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>"</xsl:text>
                <xsl:value-of select="text()"/>
                <xsl:text>"</xsl:text>
              </xsl:otherwise>
            </xsl:choose>  
          </xsl:otherwise>
        </xsl:choose>  
      </xsl:template>
      
      <xsl:template match="d:*" mode="sub-parameter">
        <xsl:text> { :</xsl:text>
        <xsl:value-of select="name()"/>
        <xsl:text> => </xsl:text>
        <xsl:value-of select="text()"/>
        <xsl:text> }</xsl:text>
        <xsl:choose>  
          <xsl:when test=". = ../*[last()]">
            <xsl:text> </xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>,</xsl:text>
          </xsl:otherwise>
        </xsl:choose>  
      </xsl:template>

      <xsl:template match="d:manipulate" mode="part-of-call">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-content">
          <xsl:with-param name="myspace"><xsl:value-of select="$myspace"/></xsl:with-param>
        </xsl:call-template>
      </xsl:template>

      <xsl:template name="print-content">
        <xsl:param name="myspace"/>
        <xsl:if test="text()">
          <xsl:text> do </xsl:text>
          <xsl:if test="@output">
            <xsl:text>|</xsl:text>
            <xsl:value-of select="@output"/>
            <xsl:text>|</xsl:text>
          </xsl:if>
          <xsl:call-template name="print-newline"/>
          <xsl:value-of select="text()"/>
          <xsl:call-template name="print-newline"/>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count"><xsl:value-of select="$myspace+$myspacemultiplier"/></xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
        </xsl:if>
      </xsl:template>

      <xsl:template name="print-space">
        <xsl:param name="i"/>
        <xsl:param name="count"/>
        <xsl:if test="$i &lt;= $count">
          <xsl:text> </xsl:text>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">
              <xsl:value-of select="$i + 1"/>
            </xsl:with-param>
            <xsl:with-param name="count">
              <xsl:value-of select="$count"/>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:if>
      </xsl:template>
      <xsl:template name="print-newline">
        <xsl:text>
</xsl:text>
      </xsl:template>

    </xsl:stylesheet>
  </transformation>
</testset>
