#!/usr/bin/ruby
require 'rubygems'
require 'riddl/server'
require 'xml/smart'
require 'base64'

# $cpee = 'http://cpee.org:9298/'
$cpee = 'http://localhost:9298/'

class Instantiate < Riddl::Implementation
  def response
    tdoc = @p[0].value.read
    if @p[0].additional =~ /base64/
      tdoc = Base64.decode64(tdoc)
    end

    XML::Smart.string(tdoc) do |doc|
      doc.register_namespace 'desc', 'http://cpee.org/ns/description/1.0'
      doc.register_namespace 'prop', 'http://riddl.org/ns/common-patterns/properties/1.0'

      p $cpee

      srv = Riddl::Client.new($cpee, $cpee + "?riddl-description")
      res = srv.resource("/")
      status, response = res.post Riddl::Parameter::Simple.new("info",doc.find("string(/testset/attributes/prop:info)"))

      ins = -1
      if status == 200
        ins = response.first.value
        params = []

        res = srv.resource("/#{ins}/properties/values")
        ["handlerwrapper","positions","dataelements","endpoints","transformation"].each do |item|
          if doc.find("/testset/#{item}").any?
            params << Riddl::Parameter::Simple.new("name",item)
            params << Riddl::Parameter::Simple.new("content",doc.find("/testset/#{item}").first.dump)
          end
        end  
        ["description"].each do |item|
          if doc.find("/testset/#{item}").any?
            params << Riddl::Parameter::Simple.new("name",item)
            params << Riddl::Parameter::Simple.new("content","<content>" + doc.find("/testset/#{item}/desc:*").first.dump + "</content>")
          end
        end

        params << Riddl::Parameter::Simple.new("name",'state')
        params << Riddl::Parameter::Simple.new("value","running")

        status, response = res.put params
        return Riddl::Parameter::Simple.new("url",$cpee + ins)
      end
    end

    @status = 500
  end
end

Riddl::Server.new(File.dirname(__FILE__) + '/instantiation.xml', :port => 9296, :debug => STDOUT) do
  accessible_description true
  cross_site_xhr true

  on resource do
    run Instantiate if post 'instantiate'
  end
end.loop!
