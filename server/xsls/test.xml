<?xml version="1.0"?>
<properties xmlns="http://riddl.org/ns/common-patterns/properties/1.0">
  <name>BasisloesungVersuch4</name>
  <state>ready</state>
  <handlerwrapper>DefaultHandlerWrapper</handlerwrapper>
  <positions/>
  <dataelements/>
  <endpoints>
    <timeout>http://gruppe.wst.univie.ac.at/~mangler/services/timeout.php</timeout>
  </endpoints>
  <dsl>activity :a1, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :desc =&gt; Start }, { :param1 =&gt; 1 } ]
activity :a15, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }  { :desc =&gt; Create Contexts for HO and NWUs }, { :param1 =&gt; 2 } ]
activity :a2, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; Create Layer3 Data }, { :param1 =&gt; 3 } ]
loop post_test{a1} do
  activity :a7, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; EAD Calculation }, { :param1 =&gt; 5 } ]
  activity :a3, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; Technical Check }, { :param1 =&gt; 6 } ]
  choose do
    alternative c1 do
      activity :a5, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; BF Check }, { :param1 =&gt; 7 } ]
      choose do
        alternative c2 do
          activity :a6, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; New Parametrization }, { :param1 =&gt; 8 } ]
        end
        otherwise do
        end
      end
    end
    otherwise do
    end
  end
end
parallel do
  parallel_branch  do |s1|
    activity :a9, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; RWA Calculation }, { :param1 =&gt; 9 } ]
    activity :a8, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; RWA-Reports for FMA }, { :param1 =&gt; 10 } ]
  end
  parallel_branch  do |s2|
    activity :a4, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; CORP-Reports for FMA }, { :param1 =&gt; 11 } ]
  end
end
activity :a10, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; Unlock User for Context HO }, { :param1 =&gt; 12 } ]
choose do
  alternative c3 do
    activity :a13, :call, :, :method =&gt; "post", :parameters =&gt; [ { :param1 =&gt; 13 }, { :desc =&gt; SQL } ]
    activity :a12, :call, :, :method =&gt; "post", :parameters =&gt; [ { :param1 =&gt; 16 }, { :desc =&gt; EXCEL } ]
  end
  otherwise do
    activity :a11, :call, :, :method =&gt; "post", :parameters =&gt; [ { :param1 =&gt; 15 }, { :desc =&gt; FRM } ]
  end
end
activity :a14, :call, :timeout, :method =&gt; "post", :parameters =&gt; [ { :timeout =&gt; 2 }, { :desc =&gt; Board Presentation }, { :param1 =&gt; 14 } ]
</dsl>
  <status>
    <id>0</id>
    <message>undefined</message>
  </status>
  <description>
    <description xmlns="http://cpee.org/ns/description/1.0">
      <call id="a1" endpoint="timeout">
        <parameters>
          <method>post</method>
          <parameters>
            <desc>Start</desc>
            <param1>1</param1>
          </parameters>
        </parameters>
      </call>
      <call id="a15" endpoint="timeout">
        <parameters>
          <method>post</method>
          <parameters>
            <timeout>2</timeout>
            <desc>Create Contexts for HO and NWUs</desc>
            <param1>2</param1>
          </parameters>
        </parameters>
      </call>
      <call id="a2" endpoint="timeout">
        <parameters>
          <method>post</method>
          <parameters>
            <timeout>2</timeout>
            <desc>Create Layer3 Data</desc>
            <param1>3</param1>
          </parameters>
        </parameters>
      </call>
      <loop post_test="a1">
        <call id="a7" endpoint="timeout">
          <parameters>
            <method>post</method>
            <parameters>
              <timeout>2</timeout>
              <desc>EAD Calculation</desc>
              <param1>5</param1>
            </parameters>
          </parameters>
        </call>
        <call id="a3" endpoint="timeout">
          <parameters>
            <method>post</method>
            <parameters>
              <timeout>2</timeout>
              <desc>Technical Check</desc>
              <param1>6</param1>
            </parameters>
          </parameters>
        </call>
        <choose>
          <alternative condition="c1">
            <call id="a5" endpoint="timeout">
              <parameters>
                <method>post</method>
                <parameters>
                  <timeout>2</timeout>
                  <desc>BF Check</desc>
                  <param1>7</param1>
                </parameters>
              </parameters>
            </call>
            <choose>
              <alternative condition="c2">
                <call id="a6" endpoint="timeout">
                  <parameters>
                    <method>post</method>
                    <parameters>
                      <timeout>2</timeout>
                      <desc>New Parametrization</desc>
                      <param1>8</param1>
                    </parameters>
                  </parameters>
                </call>
              </alternative>
              <otherwise/>
            </choose>
          </alternative>
          <otherwise/>
        </choose>
      </loop>
      <parallel>
        <parallel_branch pass="" local="s1">
          <call id="a9" endpoint="timeout">
            <parameters>
              <method>post</method>
              <parameters>
                <timeout>2</timeout>
                <desc>RWA Calculation</desc>
                <param1>9</param1>
              </parameters>
            </parameters>
          </call>
          <call id="a8" endpoint="timeout">
            <parameters>
              <method>post</method>
              <parameters>
                <timeout>2</timeout>
                <desc>RWA-Reports for FMA</desc>
                <param1>10</param1>
              </parameters>
            </parameters>
          </call>
        </parallel_branch>
        <parallel_branch pass="" local="s2">
          <call id="a4" endpoint="timeout">
            <parameters>
              <method>post</method>
              <parameters>
                <timeout>2</timeout>
                <desc>CORP-Reports for FMA</desc>
                <param1>11</param1>
              </parameters>
            </parameters>
          </call>
        </parallel_branch>
      </parallel>
      <call id="a10" endpoint="timeout">
        <parameters>
          <method>post</method>
          <parameters>
            <timeout>2</timeout>
            <desc>Unlock User for Context HO</desc>
            <param1>12</param1>
          </parameters>
        </parameters>
      </call>
      <choose>
        <alternative condition="c3">
          <call id="a13" endpoint="">
            <parameters>
              <method>post</method>
              <parameters>
                <param1>13</param1>
                <desc>SQL</desc>
              </parameters>
            </parameters>
          </call>
          <call id="a12" endpoint="">
            <parameters>
              <method>post</method>
              <parameters>
                <param1>16</param1>
                <desc>EXCEL</desc>
              </parameters>
            </parameters>
          </call>
        </alternative>
        <otherwise>
          <call id="a11" endpoint="">
            <parameters>
              <method>post</method>
              <parameters>
                <param1>15</param1>
                <desc>FRM</desc>
              </parameters>
            </parameters>
          </call>
        </otherwise>
      </choose>
      <call id="a14" endpoint="timeout">
        <parameters>
          <method>post</method>
          <parameters>
            <timeout>2</timeout>
            <desc>Board Presentation</desc>
            <param1>14</param1>
          </parameters>
        </parameters>
      </call>
    </description>
  </description>
  <transformation>
    <!--{{{-->
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:d="http://cpee.org/ns/description/1.0" version="1.0">
      <xsl:output method="text"/>
      <xsl:strip-space elements="*"/>
      <xsl:variable name="myspacemultiplier">2</xsl:variable>
      <xsl:template match="/">
        <xsl:apply-templates select="//d:description"/>
      </xsl:template>
      <xsl:template match="//d:description">
        <xsl:apply-templates>
          <xsl:with-param name="myspace">
            <xsl:value-of select="-1*$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:apply-templates>
      </xsl:template>
      <xsl:template match="*">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:if test="name()='call' or name()='manipulate'">
          <xsl:choose>
            <xsl:when test="@lay">
              <xsl:text>activity [:</xsl:text>
              <xsl:value-of select="@id"/>
              <xsl:text>,</xsl:text>
              <xsl:value-of select="@lay"/>
              <xsl:text>]</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>activity :</xsl:text>
              <xsl:value-of select="@id"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
        <xsl:if test="name()='call'">
          <xsl:text>, :call, :</xsl:text>
          <xsl:value-of select="@endpoint"/>
          <xsl:apply-templates select="d:parameters"/>
          <xsl:apply-templates select="d:manipulate" mode="part-of-call">
            <xsl:with-param name="myspace">
              <xsl:value-of select="$myspace"/>
            </xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='manipulate'">
          <xsl:text>, :manipulate</xsl:text>
          <xsl:call-template name="print-content">
            <xsl:with-param name="myspace">
              <xsl:value-of select="$myspace"/>
            </xsl:with-param>
          </xsl:call-template>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='parallel'">
          <xsl:text>parallel</xsl:text>
          <xsl:if test="@wait">
            <xsl:text> :wait =&gt; </xsl:text>
            <xsl:value-of select="@wait"/>
          </xsl:if>
          <xsl:text> do</xsl:text>
          <xsl:call-template name="print-newline"/>
          <xsl:apply-templates>
            <xsl:with-param name="myspace">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='loop'">
          <xsl:text>loop </xsl:text>
          <xsl:if test="@pre_test">
            <xsl:text>pre_test{</xsl:text>
            <xsl:value-of select="@pre_test"/>
            <xsl:text>} </xsl:text>
          </xsl:if>
          <xsl:if test="@post_test">
            <xsl:text>post_test{</xsl:text>
            <xsl:value-of select="@post_test"/>
            <xsl:text>} </xsl:text>
          </xsl:if>
          <xsl:text>do</xsl:text>
          <xsl:call-template name="print-newline"/>
          <xsl:apply-templates>
            <xsl:with-param name="myspace">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='choose'">
          <xsl:text>choose do</xsl:text>
          <xsl:call-template name="print-newline"/>
          <xsl:apply-templates>
            <xsl:with-param name="myspace">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
        <xsl:if test="name()='group'">
          <xsl:apply-templates>
            <xsl:with-param name="myspace">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:apply-templates>
          <xsl:call-template name="print-newline"/>
        </xsl:if>
      </xsl:template>
      <xsl:template match="d:alternative">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:text>alternative </xsl:text>
        <xsl:value-of select="@condition"/>
        <xsl:text> do</xsl:text>
        <xsl:call-template name="print-newline"/>
        <xsl:apply-templates>
          <xsl:with-param name="myspace">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:apply-templates>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:text>end</xsl:text>
        <xsl:call-template name="print-newline"/>
      </xsl:template>
      <xsl:template match="d:otherwise">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:text>otherwise do</xsl:text>
        <xsl:call-template name="print-newline"/>
        <xsl:apply-templates>
          <xsl:with-param name="myspace">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:apply-templates>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:text>end</xsl:text>
        <xsl:call-template name="print-newline"/>
      </xsl:template>
      <xsl:template match="d:parallel_branch">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:text>parallel_branch</xsl:text>
        <xsl:if test="@pass">
          <xsl:text> </xsl:text>
          <xsl:value-of select="@pass"/>
        </xsl:if>
        <xsl:text> do</xsl:text>
        <xsl:if test="@local">
          <xsl:text> |</xsl:text>
          <xsl:value-of select="@local"/>
          <xsl:text>|</xsl:text>
        </xsl:if>
        <xsl:call-template name="print-newline"/>
        <xsl:apply-templates>
          <xsl:with-param name="myspace">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:apply-templates>
        <xsl:call-template name="print-space">
          <xsl:with-param name="i">1</xsl:with-param>
          <xsl:with-param name="count">
            <xsl:value-of select="$myspace+$myspacemultiplier"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:text>end</xsl:text>
        <xsl:call-template name="print-newline"/>
      </xsl:template>
      <xsl:template match="d:parameters">
        <xsl:apply-templates select="d:*" mode="parameter"/>
      </xsl:template>
      <xsl:template match="d:*" mode="parameter">
        <xsl:text>, :</xsl:text>
        <xsl:value-of select="name()"/>
        <xsl:text> =&gt; </xsl:text>
        <xsl:choose>
          <xsl:when test="count(*) &gt; 0">
            <xsl:text>[</xsl:text>
            <xsl:apply-templates select="d:*" mode="sub-parameter"/>
            <xsl:text>]</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="@type = 'symbolic'">
                <xsl:value-of select="text()"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>"</xsl:text>
                <xsl:value-of select="text()"/>
                <xsl:text>"</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template match="d:*" mode="sub-parameter">
        <xsl:text> { :</xsl:text>
        <xsl:value-of select="name()"/>
        <xsl:text> =&gt; </xsl:text>
        <xsl:value-of select="text()"/>
        <xsl:text> }</xsl:text>
        <xsl:choose>
          <xsl:when test=". = ../*[last()]">
            <xsl:text> </xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>,</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template match="d:manipulate" mode="part-of-call">
        <xsl:param name="myspace"/>
        <xsl:call-template name="print-content">
          <xsl:with-param name="myspace">
            <xsl:value-of select="$myspace"/>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:template>
      <xsl:template name="print-content">
        <xsl:param name="myspace"/>
        <xsl:if test="text()">
          <xsl:text> do </xsl:text>
          <xsl:if test="@output">
            <xsl:text>|</xsl:text>
            <xsl:value-of select="@output"/>
            <xsl:text>|</xsl:text>
          </xsl:if>
          <xsl:call-template name="print-newline"/>
          <xsl:value-of select="text()"/>
          <xsl:call-template name="print-newline"/>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">1</xsl:with-param>
            <xsl:with-param name="count">
              <xsl:value-of select="$myspace+$myspacemultiplier"/>
            </xsl:with-param>
          </xsl:call-template>
          <xsl:text>end</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="print-space">
        <xsl:param name="i"/>
        <xsl:param name="count"/>
        <xsl:if test="$i &lt;= $count">
          <xsl:text> </xsl:text>
          <xsl:call-template name="print-space">
            <xsl:with-param name="i">
              <xsl:value-of select="$i + 1"/>
            </xsl:with-param>
            <xsl:with-param name="count">
              <xsl:value-of select="$count"/>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:if>
      </xsl:template>
      <xsl:template name="print-newline">
        <xsl:text>
</xsl:text>
      </xsl:template>
    </xsl:stylesheet>
    <!--}}}-->
  </transformation>
</properties>
